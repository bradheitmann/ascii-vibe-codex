# =============================================================================
# ASCII VIBE CODEX — TIER-3 SUPERSET v12
# SECTION 4: ADVANCED CREATIVE EXAMPLES + PROCEDURAL ART GENERATORS
# =============================================================================
section: 4
title: "Advanced Creative Examples + Procedural Art Generators"
version: "12.0"
status: "PRODUCTION-READY"
purpose: >
  Extend ASCII VIBE CODEX capabilities with high-complexity visual compositions
  and procedural generation patterns, now adapted to Swiss International grid rules.
  Focus on reproducibility, grid discipline, and alignment integrity across
  all generated works.

# -----------------------------------------------------------------------------
# 4.1 ADVANCED CHARTING
# -----------------------------------------------------------------------------
advanced_charts:
  radial_meter:
    description: "Circular/semi-circular meter using ASCII-safe arcs."
    rules:
      - "All arcs must be symmetric along grid axes."
      - "Tick marks at 0°, 90°, 180°, 270° align to monospace positions."
      - "Use density variation for fill levels (█ full, ▒ mid, · low)."
    example: |
      +----+
     /████ \
    |██████|
     \████ /
      +----+
  isometric_bar:
    description: "Pseudo-3D bar chart in isometric projection."
    rules:
      - "Left and right faces use different density for depth."
      - "Top faces always use lighter density."
      - "Baseline aligns to grid; all bars share same horizon line."
    example: |
      ███
     ███▒
    ███▒▒

# -----------------------------------------------------------------------------
# 4.2 GRID-ALIGNED PATTERNS
# -----------------------------------------------------------------------------
patterns:
  hatch_fill:
    description: "Diagonal hatch patterns for texture encoding."
    ascii: ["/", "\\"]
    density_map:
      low: "/   "
      medium: "/ / "
      high: "////"
  stipple_fill:
    description: "Dot patterns for subtle shading."
    ascii: "."
    density_map:
      low: ".   "
      medium: "..  "
      high: "...."

# -----------------------------------------------------------------------------
# 4.3 PROCEDURAL GENERATORS
# -----------------------------------------------------------------------------
generators:
  braid_pattern:
    description: "Interlacing strands, perfect symmetry on grid."
    parameters:
      strands: 3
      repeat_units: 4
    rules:
      - "Each strand width = 1 char."
      - "Spacing between strands = 1 char."
      - "Repeat seamlessly when tiled."
    example: |
      /\/\
      \/\/
  wave_pattern:
    description: "ASCII sine-like wave."
    parameters:
      amplitude: 2
      wavelength: 8
    rules:
      - "Peaks and troughs align to same columns across repetitions."
      - "Supports phase shift param."
    example: |
      ~~~~    ~~~~
         ~~~~    

# -----------------------------------------------------------------------------
# 4.4 SWISS COMPOSITIONAL RULES FOR CREATIVE WORKS
# -----------------------------------------------------------------------------
composition_rules:
  - "All creative works must still align to Swiss grid units."
  - "Whitespace between patterns is intentional and measured."
  - "Legends/captions follow same placement rules as charts."
  - "Complex compositions may be divided into panels with consistent gutters."

# -----------------------------------------------------------------------------
# 4.5 QC FOR CREATIVE OUTPUTS
# -----------------------------------------------------------------------------
qc_checks:
  - id: "grid_alignment"
    desc: "Verify every glyph sits on defined grid columns/rows."
  - id: "pattern_repeat"
    desc: "Ensure procedural patterns tile without artifacts."
  - id: "density_consistency"
    desc: "Verify density maps match defined fill levels."
  - id: "symmetry_check"
    desc: "For symmetric patterns, left and right halves must match."

# -----------------------------------------------------------------------------
# 4.6 IMPLEMENTATION NOTES
# -----------------------------------------------------------------------------
implementation_notes:
  - "Procedural patterns can be generated by LLMs using deterministic formulas."
  - "QC hooks from Section 5 apply here with additional creative rules."
  - "All examples should be reproducible with CLI tools from Section 6."
  - "Where Unicode is allowed, use block elements for higher fidelity, else ASCII."
  - "Preserve Swiss visual hierarchy even in artistic compositions."

# =============================================================================
# END SECTION 4
# =============================================================================

